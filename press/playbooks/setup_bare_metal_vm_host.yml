---
# Playbook for setting up a bare metal host as a virtualization host with KVM/QEMU
- name: Setup VM host with KVM/QEMU
  hosts: all
  become: yes
  gather_facts: yes
  vars:
    host_ip: "{{ host_ip }}"
    ssh_user: "{{ ssh_user }}"
    ssh_port: "{{ ssh_port }}"

  tasks:
    - name: Check if CPU supports virtualization
      shell: egrep -c '(vmx|svm)' /proc/cpuinfo
      register: virt_support
      changed_when: false
      ignore_errors: true
      
    - name: Fail if virtualization is not supported
      fail:
        msg: "This CPU does not support hardware virtualization. Cannot set up as VM host."
      when: virt_support.stdout|int == 0

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install virtualization packages
      apt:
        name:
          - qemu-kvm
          - libvirt-daemon-system
          - libvirt-clients
          - bridge-utils
          - virtinst
          - virt-manager
          - cpu-checker
          - libosinfo-bin
          - libguestfs-tools
          - ovmf
        state: present

    - name: Install additional management tools
      apt:
        name:
          - python3-libvirt
          - virt-top
          - dnsmasq-base
          - netcat-openbsd
        state: present

    - name: Create libvirt storage directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: root
        group: root
      with_items:
        - /var/lib/libvirt/images
        - /var/lib/libvirt/boot

    - name: Create default storage pool if it doesn't exist
      virt_pool:
        command: define
        name: default
        xml: |
          <pool type='dir'>
            <name>default</name>
            <target>
              <path>/var/lib/libvirt/images</path>
              <permissions>
                <mode>0711</mode>
                <owner>0</owner>
                <group>0</group>
              </permissions>
            </target>
          </pool>
      register: pool_define
      failed_when: 
        - pool_define.failed
        - '"already exists" not in pool_define.msg'

    - name: Start default storage pool
      virt_pool:
        state: active
        name: default
        autostart: yes

    - name: Create libvirt bridge network definition
      copy:
        dest: /tmp/libvirt-bridge-network.xml
        content: |
          <network>
            <name>bridge</name>
            <forward mode="bridge"/>
            <bridge name="br0"/>
          </network>
      
    - name: Define libvirt bridge network
      command: virsh net-define /tmp/libvirt-bridge-network.xml
      ignore_errors: yes
      register: net_define
      changed_when: "'defined from /tmp/libvirt-bridge-network.xml' in net_define.stdout"
      failed_when:
        - net_define.rc != 0
        - "'already exists' not in net_define.stderr"
      
    - name: Start and enable libvirt bridge network
      command: "{{ item }}"
      with_items:
        - virsh net-autostart bridge
        - virsh net-start bridge
      ignore_errors: yes
      register: net_start
      changed_when: false
      failed_when:
        - net_start.rc != 0
        - "'already active' not in net_start.stderr" 
        - "'already marked as autostarted' not in net_start.stderr"

    - name: Allow UDP and TCP ports for libvirt/KVM
      ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
      with_items:
        - { port: '16509', proto: 'tcp' }  # libvirtd TCP
        - { port: '16514', proto: 'tcp' }  # libvirtd TLS
        - { port: '5900-5950', proto: 'tcp' }  # VNC 
        - { port: '22', proto: 'tcp' }  # SSH

    - name: Check KVM status
      command: kvm-ok
      register: kvm_status
      changed_when: false
      ignore_errors: true

    - name: Show KVM status
      debug:
        var: kvm_status.stdout_lines
      when: kvm_status.rc == 0

    - name: Configure kernel for better virtualization performance
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        sysctl_set: yes
        reload: yes
      with_items:
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '0' }
        - { name: 'net.bridge.bridge-nf-call-iptables', value: '0' }
        - { name: 'net.bridge.bridge-nf-call-arptables', value: '0' }
      
  handlers:
    - name: Restart libvirtd
      service:
        name: libvirtd
        state: restarted

  post_tasks:
    - name: Verify libvirtd is running
      service:
        name: libvirtd
        state: started
        enabled: yes

    - name: Get libvirtd status
      shell: systemctl status libvirtd
      register: libvirtd_status
      changed_when: false 