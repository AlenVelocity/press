---
# Playbook for setting up automated backups on a bare metal host
- name: Setup automated backups
  hosts: all
  become: yes
  gather_facts: yes
  vars:
    host_ip: "{{ host_ip }}"
    ssh_user: "{{ ssh_user }}"
    ssh_port: "{{ ssh_port }}"
    backup_schedule: "{{ backup_schedule | default('0 2 * * *') }}"
    backup_retention: "{{ backup_retention | default(7) }}"
    backup_destination: "{{ backup_destination | default('/var/backups/bare-metal') }}"

  tasks:
    - name: Ensure required packages are installed
      apt:
        name:
          - rsync
          - tar
          - gzip
          - pigz
          - cron
        state: present
        update_cache: yes

    - name: Create backup directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0750'
        owner: root
        group: root
      with_items:
        - "{{ backup_destination }}"
        - "{{ backup_destination }}/system"
        - "{{ backup_destination }}/logs"
        - "/usr/local/bin/backup-scripts"

    - name: Create backup script
      template:
        src: templates/host_backup.sh.j2
        dest: /usr/local/bin/backup-scripts/host_backup.sh
        mode: '0750'
        owner: root
        group: root
      vars:
        backup_dest: "{{ backup_destination }}"
        retention_days: "{{ backup_retention }}"

    - name: Create backup script template if not exists
      copy:
        dest: /usr/local/bin/backup-scripts/host_backup.sh
        content: |
          #!/bin/bash
          # Automated backup script for bare metal host
          # Generated by Press

          set -e

          BACKUP_DIR="{{ backup_destination }}"
          RETENTION_DAYS={{ backup_retention }}
          DATE=$(date +%Y%m%d-%H%M%S)
          SYSTEM_BACKUP_FILE="${BACKUP_DIR}/system/system-${DATE}.tar.gz"
          LOG_DIR="${BACKUP_DIR}/logs"
          LOG_FILE="${LOG_DIR}/backup-${DATE}.log"

          # Make sure directories exist
          mkdir -p "${BACKUP_DIR}/system"
          mkdir -p "${LOG_DIR}"

          # Start logging
          exec > >(tee -a "${LOG_FILE}") 2>&1

          echo "=== Backup started at $(date) ==="

          # Backup important system configurations
          echo "Backing up system configurations..."
          tar -czf "${SYSTEM_BACKUP_FILE}" \
              --exclude="/etc/ssl/private" \
              --exclude="/etc/letsencrypt/archive" \
              --exclude="/etc/letsencrypt/keys" \
              /etc /var/spool/cron

          echo "System configuration backup saved to ${SYSTEM_BACKUP_FILE}"

          # Clean up old backups
          echo "Cleaning up backups older than ${RETENTION_DAYS} days..."
          find "${BACKUP_DIR}" -type f -name "*.tar.gz" -mtime +${RETENTION_DAYS} -delete
          find "${LOG_DIR}" -type f -name "*.log" -mtime +${RETENTION_DAYS} -delete

          echo "=== Backup completed at $(date) ==="
          exit 0
        mode: '0750'
        owner: root
        group: root
      when: ansible_check_mode is not defined

    - name: Setup cron job for regular backups
      cron:
        name: "Press automated host backup"
        job: "/usr/local/bin/backup-scripts/host_backup.sh > /dev/null 2>&1"
        user: root
        cron_file: press-host-backup
        state: present
        special_time: "{{ 'daily' if backup_schedule == '0 2 * * *' else omit }}"
        minute: "{{ backup_schedule.split(' ')[0] if backup_schedule != '0 2 * * *' else omit }}"
        hour: "{{ backup_schedule.split(' ')[1] if backup_schedule != '0 2 * * *' else omit }}"
        day: "{{ backup_schedule.split(' ')[2] if backup_schedule != '0 2 * * *' else omit }}"
        month: "{{ backup_schedule.split(' ')[3] if backup_schedule != '0 2 * * *' else omit }}"
        weekday: "{{ backup_schedule.split(' ')[4] if backup_schedule != '0 2 * * *' else omit }}"

    - name: Run initial backup
      shell: /usr/local/bin/backup-scripts/host_backup.sh
      args:
        creates: "{{ backup_destination }}/system/system-*.tar.gz" 